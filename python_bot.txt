const { Connection, PublicKey } = require('@solana/web3.js');

// 设置Helius RPC节点连接
const heliusRpcUrl = 'https://your-helius-rpc-url'; // 替换成你的Helius RPC节点URL
const connection = new Connection(heliusRpcUrl, 'confirmed');

// 目标钱包地址列表
const walletAddresses = ['Address1', 'Address2', 'Address3']; // 替换成你想要监控的多个钱包地址

// 用来记录每个地址最后一次获取的交易签名
const lastSignatures = {};

// 定义获取交易信息的函数
async function getTransactions(address) {
    const pubkey = new PublicKey(address);

    // 获取交易签名列表
    const signatures = await connection.getConfirmedSignaturesForAddress2(pubkey, { limit: 3 });

    // 过滤出新的交易签名
    const newSignatures = signatures.filter(signature => !lastSignatures[address] || !lastSignatures[address].includes(signature.signature));

    // 记录最后一次获取的交易签名
    lastSignatures[address] = signatures.map(signature => signature.signature);

    // 获取新的交易详情
    const transactions = await Promise.all(newSignatures.map(async (signature) => {
        try {
            return await connection.getParsedTransaction(signature.signature, {
                commitment: 'confirmed',
                maxSupportedTransactionVersion: 0
            });
        } catch (error) {
            console.error('Error fetching transaction:', error);
            return null; // 返回null以处理错误
        }
    }));

    // 返回交易信息
    return transactions.filter(tx => tx !== null); // 过滤掉null值的交易
}

// 定义异步函数来循环获取交易信息
async function monitorWallets() {
    async function monitor(index) {
        if (index >= walletAddresses.length) {
            return; // 如果已经监控完所有地址，则停止递归
        }

        const address = walletAddresses[index];
        const transactions = await getTransactions(address);
        console.log(`Transactions for ${address}:`, transactions);

        setTimeout(() => {
            monitor((index + 1) % walletAddresses.length); // 递归调用，继续监控下一个地址
        }, 15 * 1000); // 每隔15秒获取下一个地址的交易信息
    }

    // 从第一个地址开始监控
    monitor(0);
}

// 定义定时器来每隔3分钟重新获取所有地址的交易信息
setInterval(() => {
    monitorWallets();
}, 3 * 60 * 1000); // 每隔3分钟重新获取所有地址的交易信息

// 开始监控
monitorWallets();
